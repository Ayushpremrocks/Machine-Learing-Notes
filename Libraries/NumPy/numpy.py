# -*- coding: utf-8 -*-
"""NumPy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EEGwoZDO-jUv1fZBXOPSV1p7FiwRuxNE

# Numpy
  - NumPy is a multi-dimensional array library
  - it is faster than lists
  - it uses fixed type
  - it is faster to read as it uses less bytes of memory
  - no type checking when iterating through objects
  - numpy uses contiguous memory
    benefits
    - SIMD vector processing
    - Effective cache utilization

  - applications
    - mathematics (MATLAB replacement)
    - plotting (matplotlib)
    - backend (pandas, connect 4, digital photography)
    - machine learning

YT video: https://youtu.be/QUT1VHiLmmI?si=Ema9OrDFDxCCIswj

# Installing NumPy
"""

pip install numpy

"""# Loading NumPy"""

import numpy as np
import sys

"""# Basics

1-D array
"""

# 1-D array
a= np.array([1,2,3])
print(a)

"""2-D array"""

# 2-D array
b= np.array([[1,2,3],[4,5,6]])
print(b)

"""Get dimension"""

#get dimension
print(a.ndim)
print(b.ndim)

"""Getting shape"""

#get shape
print(a.shape)
print(b.shape)

"""Getting type"""

#get type
print(a.dtype)
print(b.dtype)

"""Getting size"""

#get size
print(a.itemsize)
print(b.itemsize)

"""Total Size"""

# total size (a.size*a.itemsize)
print(a.nbytes)
print(b.nbytes)

"""Getting total no of elements"""

#get number of elements
print(a.size)
print(b.size)

"""# Accessing/changing specific elements, rows, columns, etc bold text"""

a = np.array([[1,2,3,4,5,6,7,8,9,10],[11,12,13,14,15,16,17,18,19,20]])
print(a)

"""Getting a specific element [row,column]"""

#get a specific element [r,c]
a[1,7]

"""Getting a specific row"""

#get a specific row
a[1,:]

"""Getting a specific colimn"""

#get a specific column
a[:,4]

"""Step size [start index: stop index: step size]"""

#Step size [start index: stop index: step size]
a[0,5:0:-2]

"""changing an element"""

# changing an element
a[0,4] = 99
a[:,7] = [100,200]
print(a)

"""3-d example"""

a = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
print(a)

"""Getting a specific element (work outside in)"""

# Get specific element (work outside in)
a[0,1,1]

"""Replacing an element"""

#Replacing an element
a[:,0,:] = [[00,00],[99,99]]
print(a)

"""# Initializing different types of arrays

Setting all zero matrix
"""

# All 0s matrix
np.zeros((2,3))

# All 0s matrix
np.zeros((2,3,4))

# All 0s matrix
np.zeros((2,3,4,5))

"""Setting all one matrix"""

# All 1s matrix
np.ones((4,3,3))

# All 1s matrix
np.ones((4,3,3), dtype='int32')

"""Setting all any number matrix"""

# Any other number
# ((rows,columns),element)
np.full((10,10),10)

# Any other number (full_like)
np.full_like(a, 4)

"""Random decimal numbers"""

# Random decimal numbers
np.random.rand(4,2,2)

"""Random integer values"""

# Random Integer values
np.random.randint(-10,20, size=(3,3))

"""Identity Matrix"""

# The identity matrix
np.identity(4)

"""Repeating an array"""

# Repeat an array
arr = np.array([[1,2,3]])
a = np.repeat(arr,3, axis=0)
print(a)

output = np.ones((5,5))
print(output)

z = np.zeros((3,3))
z[1,1] = 3
print(z)

output[1:-1,1:-1] = z
print(output)

"""Copying array"""

a = np.array([1,2,3])
b = a.copy()
b[0] = 100
print(a)
print(b)

"""# Basic mathematics"""

a = np.array([1,2,3,4,5,6,7,8,9,10])
print(a)

a+1

a-1

a/2

b = np.array([1,0,1,0,1,0,1,0,1,0])
a+b

a**2

a**3

np.sin(a)
np.cos(a)

"""# Linear algrebra

Multiplying 2 matrices
"""

a = np.ones((2,3))
print(a)

b = np.full((3,2), 2)
print(b)

#multiplying 2 matrices
np.matmul(a,b)

"""Finding determinant"""

# Find the determinant
c = np.identity(3)
np.linalg.det(c)

"""# Statisitics"""

stats = np.array([[1,2,3,4,5],[6,7,8,9,10]])
stats

"""Minimum Value"""

np.min(stats)

"""Minimum Value in specifc row"""

np.min(stats, axis=1)

"""Maximum Value"""

np.max(stats)

"""Maximum Value in specific row"""

np.max(stats, axis=1)

"""Sum of all the elements"""

np.sum(stats)

"""# Reorganizing arrays

Reshaping an array
"""

before = np.array([[1,2,3,4],[5,6,7,8]])
print(before)

after = before.reshape((2,2,2))
print(after)

"""Vertically stacking vectors"""

# Vertically stacking vectors
v1 = np.array([1,2,3,4])
v2 = np.array([5,6,7,8])

np.vstack([v1,v2,v1,v2])

"""Horizontally stacking vectors"""

# Horizontal  stack
h1 = np.ones((2,4))
h2 = np.zeros((2,2))

np.hstack((h1,h2))

"""# Miscellaneous

Loading data from file
"""

filedata = np.genfromtxt('data.txt', delimiter=',')
filedata = filedata.astype('int32')
print(filedata)

"""Boolean masking and advanced indexing"""

filedata>50

filedata[filedata>50]

(~((filedata > 50) & (filedata < 100)))